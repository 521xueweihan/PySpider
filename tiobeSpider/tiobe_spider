#!/usr/bin/env python
# -*- coding:utf-8 -*-
#   
#   Author  :   XueWeiHan
#   Date    :   17/7/19 下午3:19
#   Desc    :   tiobe 语言排名
# url = 'https://www.tiobe.com/tiobe-ixndex/'

import datetime
import re

import redis
import requests
from lxml import html

# conn = redis.Redis(host='127.0.0.1', port=6379)

    
def parse_rank(top20, next30):
    """
    解析并返回前五十编程语言评级表
    """
    rank_list = []
    positions_list = top20.xpath('./tbody/tr/td[1]/text()')
    languages_list = top20.xpath('./tbody/tr/td[4]/text()')
    ratings_list = top20.xpath('./tbody/tr/td[5]/text()')
    positions_list.extend(next30.xpath('./tbody/tr/td[1]/text()'))
    languages_list.extend(next30.xpath('./tbody/tr/td[2]/text()'))
    ratings_list.extend(next30.xpath('./tbody/tr/td[3]/text()'))
    for i, position in enumerate(positions_list):
        rank_list.append({'position': position,
                          'language': languages_list[i],
                          'rating': ratings_list[i]})
    return rank_list


def parse_hall(hall_of_fame):
    """
    解析并返回年度语言表
    """
    hall_list = []
    # 该 table 没有 tbody 标签（前端的锅）
    year_list = hall_of_fame.xpath('./tr/td[1]/text()')
    winners_list = hall_of_fame.xpath('./tr/td[2]/text()')
    for i, year in enumerate(year_list):
        hall_list.append({'year': year,
                          'winner': winners_list[i]})
    return hall_list


def parse_table(tree_element):
    """
    解析所有的表
    返回评级表、年度语言表
    """
    tables = tree_element.xpath('//table')
    top20_element, next30_element, history_element, hall_of_fame_element = \
        tables[0], tables[1], tables[2], tables[3]
    rank_result = parse_rank(top20_element, next30_element)
    hall_result = parse_hall(hall_of_fame_element)
    return rank_result, hall_result


def parse_chart(tree_element):
    """
    解析并返回绘图需要的数据
    """
    javascript_str = tree_element.xpath('//article/script/text()')[1]
    pattern = re.compile(r'\{name.*')
    s = re.search(pattern, javascript_str)
    if s:
        series_str = s.group()
    else:
        series_str = ''
    return series_str


def parse_description(tree_element):
    """
    解析并返回本期的描述和标题
    """
    title = tree_element.xpath('//article/h3[1]/text()')
    description = tree_element.xpath('//article/p[1]/text()')
    print title
    print description
    
    
url = 'https://www.tiobe.com/tiobe-index/'

response = requests.get(url)
tree = html.fromstring(response.text)
parse_description(tree)

# rank_result, hall_result = parse_table(tree)
# chart_result = parse_chart(tree)
# import pprint
# pprint.pprint(rank_result)
# pprint.pprint(hall_result)
# pprint.pprint(chart_result)
